// ROS message includes
#include "ros/ros.h"
#include <std_msgs/String.h>

/* protected region user include files on begin */
/* protected region user include files end */

class cob_test_action_config
{
public:
    int deviation;
};

class cob_test_action_data
{
// autogenerated: don't touch this class
public:
    //input data
    std_msgs::String in_sub;
    //output data
};

class cob_test_action_impl
{
    /* protected region user member variables on begin */
	cob_test_action::TriggerFeedback feedback_;
	cob_test_action::TriggerResult result_;
	cob_test_action::TriggerGoal test_goal;
	bool running;
	bool sendfeedback;
    /* protected region user member variables end */

public:
    cob_test_action_impl() 
    {
        /* protected region user constructor on begin */
    	running = false;
    	sendfeedback = false;
    	/* protected region user constructor end */
    }

    void configure(cob_test_action_config config) 
    {
        /* protected region user configure on begin */
        /* protected region user configure end */
    }

    void update(cob_test_action_data &data, cob_test_action_config config)
    {
        /* protected region user update on begin */
    	ROS_INFO("Input is = %s", data.in_sub.data.c_str());
    	if (!data.in_sub.data.compare("stop")) {
    		running = false;
    		ROS_INFO("stop was called -- succeeded");
    	}
    	else if (!data.in_sub.data.compare("feed")) {
    		ROS_INFO("feedback was called -- succeeded");
    		sendfeedback = true;
    	}
    	else
    		ROS_INFO("stop is not called ... still running ...");
        /* protected region user update end */
    }


    void callback_TriggerTracker_(const cob_test_action::TriggerGoalConstPtr &goal, actionlib::SimpleActionServer<cob_test_action::TriggerAction> *as_)
    {
        /* protected region user implementation of action callback for TriggerTracker on begin */
    	ROS_INFO("This is a trigger action is running!");
		running = true;
		while(running == true)
			sleep(0.1);
			if (sendfeedback == true) {
				sendfeedback = false;
				feedback_.twist.linear.x = 1.0;
				as_->publishFeedback(feedback_);
			}
		as_->setSucceeded();
        /* protected region user implementation of action callback for TriggerTracker end */
    }
    /* protected region user additional functions on begin */
    /* protected region user additional functions end */
};
