#!/usr/bin/env python
PACKAGE = "cob_twist_controller"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
interface_enum = gen.enum([ 
                       gen.const("Velocity_interface",      int_t, 0, "Publish to velocity topic"),
                       gen.const("Position_interface",      int_t, 1, "Publish to position topic")],
                     "enum types for the publisher types")

damping_method_enum = gen.enum([ 
                       gen.const("No_damping",           int_t, 0, "No damping means a damping factor of 0.0."),
                       gen.const("Constant",             int_t, 1, "Constant damping factor given by parameter damping_factor."), 
                       gen.const("Manipulability",       int_t, 2, "Damping factor calculation based on the manipulability measure."), 
                       gen.const("Least_singular_value", int_t, 3, "Damping factor calculation based on the least singular value")],
                     "enum types for the damping_method")

constraints_enum = gen.enum([ 
                       gen.const("No_constraint",  int_t, 0, "No constraints active"),
                       gen.const("WLN",            int_t, 1, "Weighted-least-norm base, with identity as weighting matrix (equal to None)"),
                       gen.const("WLN_JLA",        int_t, 2, "Weighted-least-norm joint-limit-avoidance"), 
                       gen.const("GPM_JLA",        int_t, 3, "Gradient-projection-method joint-limit-avoidance"), 
                       gen.const("GPM_JLA_MID",    int_t, 4, "Gradient-projection-method joint-limit-avoidance to keep middle"), 
                       gen.const("GPM_CA",         int_t, 5, "Gradient-projection-method collision avoidance")],
                     "enum types for the constraints")

gen.add("interface_type",     int_t,    0, "The Interface to use", 0, None, None, edit_method=interface_enum)
gen.add("numerical_filtering",bool_t,   0, "Numerical Filtering yes/no",  False)
gen.add("damping_method",     int_t,    0, "The damping method to use.", 2, None, None, edit_method=damping_method_enum)
gen.add("damping_factor",     double_t, 0, "The constant damping_factor (used in CONSTANT)",  0.01, 0, 1)
gen.add("lambda_max",         double_t, 0, "Value for maximum damping_factor (used in MANIPULABILITY/LSV)",  0.1, 0, 10)
gen.add("w_threshold",        double_t, 0, "Value for manipulability threshold (used in MANIPULABILITY)",  0.005, 0, 1)
gen.add("beta",               double_t, 0, "Beta for Low Isotropic Damping",  0.005, 0, 1)
gen.add("eps_damping",        double_t, 0, "Value for least singular value damping",  0.003, 0,   1)


gen.add("constraint",         int_t,    0, "The constraint to use (edited via an enum)", 2, None, None, edit_method=constraints_enum)

gen.add("eps_truncation",     double_t, 0, "Value for singular value threshold (used for truncation: sing. value < eps)",    0.03, 0,   1)

gen.add("k_H",                double_t, 0, "Self-motion factor for GPM", -10.0, -1000,   1000)

gen.add("keep_direction",     bool_t,   0, "With keep_direction the whole joint positions and velocities vector is affected by a scaling factor. Else only individual components of the vectors are affected -> direction will be changed.", True)
gen.add("enforce_vel_limits", bool_t,   0, "If 'True', enforce joint velocity limits in TwistController, else let RobotHW handle the limits",  True)
gen.add("enforce_pos_limits", bool_t,   0, "If 'True', enforce joint position limits in TwistController, else let RobotHW handle the limits",  True)
gen.add("tolerance",          double_t, 0, "Tolerance around joint position limits where velocities are normalized [degrees]",  5, 0, 15)

gen.add("base_compensation",  bool_t,   0, "Compensate base motion",  False)
gen.add("base_active",        bool_t,   0, "Command base actively",  False)
gen.add("base_ratio",         double_t, 0, "Value for base_ratio",  0.0, 0, 1)
gen.add("reset_markers",      bool_t,   0, "Reset Markers",  False)

exit(gen.generate(PACKAGE, "cob_twist_controller", "TwistController"))
