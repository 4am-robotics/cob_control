#!/usr/bin/env python
PACKAGE = "cob_twist_controller"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
damping_method_enum = gen.enum([
                       gen.const("NO_DAMPING",           int_t, 0, "No damping means a damping factor of 0.0."),
                       gen.const("CONSTANT",             int_t, 1, "Constant damping factor given by parameter damping_factor."),
                       gen.const("MANIPULABILITY",       int_t, 2, "Damping factor calculation based on the manipulability measure."),
                       gen.const("LEAST_SINGULAR_VALUE", int_t, 3, "Damping factor calculation based on the least singular value"),
                       gen.const("SIGMOID",              int_t, 4, "Damping factor calculation based on sigmoid functions")],
                     "enum types for the damping_methods")

solver_types_enum = gen.enum([
                       gen.const("DEFAULT_SOLVER",     int_t, 0, "No constraints active"),
                       gen.const("WLN",                int_t, 1, "Weighted-least-norm base, with identity as weighting matrix (equal to None)"),
                       gen.const("GPM",                int_t, 2, "Gradient-projection-method"),
                       gen.const("STACK_OF_TASKS",     int_t, 3, "Task Priority Strategy for all with dynamic resadjust of GPM and task ..."),
                       gen.const("TASK_2ND_PRIO",      int_t, 4, "Task Priority Strategy for obstacle avoidance ..."),
                       gen.const("UNIFIED_JLA_SA",     int_t, 5, "Inv Kinematics solver based on unified weighted least norm and sigmoid weighting functions"),
                       ],
                     "enum types for the solvers")


jla_constraints_enum = gen.enum([
                       gen.const("JLA_OFF",     int_t, 0, "JLA inactive"),
                       gen.const("JLA",         int_t, 1, "JLA active"),
                       gen.const("JLA_MID",     int_t, 2, "Special JLA: Keep joint pos in the middle of the limited range."),
                       gen.const("JLA_INEQ",    int_t, 3, "Inequality constraint for JLA."),
                       ],
                     "enum types for the joint limit avoidance constraints")

ca_constraints_enum = gen.enum([
                       gen.const("CA_OFF",            int_t, 0, "CA inactive"),
                       gen.const("CA",                int_t, 1, "Collision avoidance active!"),
                       ],
                       "enum types for the collision avoidance constraints")

kinematic_extension_enum = gen.enum([
                       gen.const("NO_EXTENSION",      int_t, 0, "No additional DoF considered"),
                       gen.const("BASE_COMPENSATION", int_t, 1, "Compensate base motion"),
                       gen.const("BASE_ACTIVE",       int_t, 2, "Consider additional DoF of a mobile base (2d)"),
                       gen.const("COB_TORSO",         int_t, 3, "KinematicExtension for COB_TORSO (any DoF)"),
                       gen.const("LOOKAT",            int_t, 4, "Consider additional DoF of a virtual Lookat component")],
                     "enum types for the kinematic extensions")

# ==================================== Damping and truncation (singular value adaption) ====================================================
damp_trunc = gen.add_group("Damping and Truncation", "damping_truncation")
damp_trunc.add("numerical_filtering",         bool_t,   0, "Numerical Filtering yes/no",  False)
damp_trunc.add("damping_method",              int_t,    0, "The damping method to use.", 2, None, None, edit_method=damping_method_enum)
damp_trunc.add("damping_factor",     double_t, 0, "The constant damping_factor (used in CONSTANT)",  0.01, 0, 1)
damp_trunc.add("lambda_max",         double_t, 0, "Value for maximum damping_factor (used in MANIPULABILITY/LSV/SIGMOID)",  0.001, 0.0001, 1.0)
damp_trunc.add("w_threshold",        double_t, 0, "Value for manipulability threshold (used in MANIPULABILITY/SIGMOID)",  0.001, 0.0001, 0.1)
damp_trunc.add("beta",               double_t, 0, "Beta for Low Isotropic Damping",  0.005, 0, 1)
damp_trunc.add("slope_damping",      double_t, 0, "Value for the activation gradient (used in SIGMOID)",  0.05, 0.001, 0.1)
damp_trunc.add("eps_damping",        double_t, 0, "Value for least singular value damping",  0.003, 0,   1)

damp_trunc.add("eps_truncation",     double_t, 0, "Value for singular value threshold (used for truncation: sing. value < eps)",    0.001, 0,   1)

# ==================================== Parameters for the solver (e.g. WLN, CA and JLA) =====================================================
solv_constr = gen.add_group("Solver and Constraints", "solver_constraints")
solv_constr.add("solver",             int_t,    0, "The solver to use (edited via an enum)", 1, None, None, edit_method=solver_types_enum)
solv_constr.add("priority",           int_t,    0, "Priority for the main end-effector task (important for task processing; 0 = highest prio)", 500, 0,   1000)
solv_constr.add("k_H",                double_t, 0, "Self-motion factor for GPM (for both JLA and CA; multiplies the homogeneous solution). ", 1.0, -1000.0, 1000.0)

jla = solv_constr.add_group("Joint Limit Avoidance", "jla")
jla.add("constraint_jla",                    int_t,    0, "The JLA constraint to use (edited via an enum)", 1, None, None, edit_method=jla_constraints_enum)
jla.add("priority_jla",                      int_t,    0, "Priority for the joint limit avoidance constraint (important for task processing; 0 = highest prio)", 50, 0,   1000)
jla.add("k_H_jla",                           double_t, 0, "Self-motion factor for GPM. Special weighting for JLA constraint", -1.0, -1000,   1000)
jla.add("activation_threshold_jla",          double_t, 0, "In [%]. Tolerance from min and max joint positition limit. (used in WLN and WLN SIGMOID)", 10.0, 0.0, 100.0)
jla.add("activation_position_threshold_jla", double_t, 0, "In [rad]. Tolerance from min and max joint positition limit.(used in WLN SIGMOID)", 0.5, 0.001, 1.0)
jla.add("activation_speed_threshold_jla",    double_t, 0, "In [rad/s]. Tolerance from min and max joint positition limit.(used in WLN SIGMOID)", 1.0, 0.001, 10.0)
jla.add("activation_buffer_jla",             double_t, 0, "In [%]. For smooth transition an additional buffer to activation threshold can be given. Smoothing is started prior to activation threshold. (0 % = no smoothing)", 300.0, 0.0, 500.0)
jla.add("critical_threshold_jla",            double_t, 0, "In [%]. Tolerance when critical region becomes active. JLA becomes task. Should be less than activation threshold (best experienced: 1/2 of activation threshold).", 5.0, 0.0, 100.0)
jla.add("damping_jla",                       double_t, 0, "Const. damping factor for the inv. of the JLA task jacobian", 0.01, 0.01, 1.0)
jla.add("damping_speed_jla",                 double_t, 0, "Const. damping factor for the inv. of the JLA task jacobian", 5.0, 0.01, 10.0)

ca = solv_constr.add_group("Collision Avoidance", "ca")
ca.add("constraint_ca",           int_t,    0, "The CA constraint to use (edited via an enum)", 0, None, None, edit_method=ca_constraints_enum)
ca.add("priority_ca",             int_t,    0, "Priority for the collision avoidance constraint (important for task processing; 0 = highest prio).", 100, 0,   1000)
ca.add("k_H_ca",                  double_t, 0, "Self-motion factor for GPM. Special weighting for CA constraint", -20.0, -1000,   1000)
ca.add("activation_threshold_ca", double_t, 0, "The distance the constraint shall get active in [m].", 0.1, 0.0, 1.0)
ca.add("activation_buffer_ca",    double_t, 0, "In [%]. For smooth transition an additional buffer to activation threshold can be given. Smoothing is started prior to activation threshold. (0 % = no smoothing)", 50.0, 0.0, 100.0)
ca.add("critical_threshold_ca",   double_t, 0, "Tolerance when critical region becomes active. CA becomes task. Should be less than activation threshold (best experienced: 1/4 of activation threshold).", 0.025, 0.0, 1.0)
ca.add("damping_ca",              double_t, 0, "Const. damping factor for the inv. of the CA task jacobian", 0.000001, 0.0, 1.0)

# ==================================== Parameters for limits enforcement =====================================================
limits = gen.add_group("Limits", "limits")
limits.add("keep_direction",       bool_t,   0, "With keep_direction the whole joint positions and velocities vector is affected by a scaling factor. Else only individual components of the vectors are affected -> direction will be changed.", True)
limits.add("enforce_input_limits", bool_t,   0, "If 'True', enforce Cartesian velocity limits on input twist", True)
limits.add("enforce_pos_limits",   bool_t,   0, "If 'True', enforce joint position limits in TwistController, else let RobotHW handle the limits",  True)
limits.add("enforce_vel_limits",   bool_t,   0, "If 'True', enforce joint velocity limits in TwistController, else let RobotHW handle the limits",  True)
limits.add("enforce_acc_limits",   bool_t,   0, "If 'True', enforce joint acceleration limits in TwistController, else let RobotHW handle the limits",  False)
limits.add("limits_tolerance",     double_t, 0, "Tolerance around joint position limits where velocities are normalized [degrees]. Must not be zero else DIV/0!", 30, 0.0, 90)
limits.add("max_lin_twist",        double_t, 0, "Maximum input linear velocity, twist command for the inverse kinematics solver in [m/s].", 0.5, 0, 5)
limits.add("max_rot_twist",        double_t, 0, "Maximum input rotational velocity, twist command for the inverse kinematics solver in [rad/s].", 0.5, 0, 5)
limits.add("max_vel_lin_base",     double_t, 0, "Maximum linear velocity to be commanded to the base in [m/s].", 0.5, 0, 1.5)
limits.add("max_vel_rot_base",     double_t, 0, "Maximum rotational velocity to be commanded to the base in [rad/s].", 0.5, 0, 1.5)

# ==================================== Parameters for kinematics extensions =====================================================
kin_ext = gen.add_group("Kinematics Extension", "kin_ext")
kin_ext.add("kinematic_extension",    int_t,    0, "Consider additional DoF", 0, None, None, edit_method=kinematic_extension_enum)
kin_ext.add("extension_ratio",        double_t, 0, "Value for ratio between chain and extension",  0.01, 0.0, 1.0)

exit(gen.generate(PACKAGE, "cob_twist_controller", "TwistController"))
