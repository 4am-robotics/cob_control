#!/usr/bin/env python
PACKAGE = "cob_twist_controller"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

damping_method_enum = gen.enum([ 
                       gen.const("manipulability",      int_t, 0, "manipulability"),
                       gen.const("constant",            int_t, 1, "constant"),
                       gen.const("truncation",          int_t, 2, "truncation")],
                     "enum types for the damping_method")

gen.add("damping_method", int_t, 0, "The damping method to use (edited via an enum)", 0, 0, 2, edit_method=damping_method_enum)

gen.add("eps", double_t, 0, "Value for singular value threshold (used in TRUNCATION)",    0.001, 0,   1)
gen.add("damping_factor", double_t, 0, "The constant damping_factor (used in CONSTANT)",  0.01, 0, 1)
gen.add("lambda0", double_t, 0, "Value for maximum damping_factor (used in MANIPULABILITY)",  0.1, 0, 10)
gen.add("wt", double_t, 0, "Value for manipulability threshold (used in MANIPULABILITY)",  0.005, 0, 1)

gen.add("JLA_active",   bool_t,   0, "Joint Limit Avoidance active",  True)
gen.add("enforce_limits",   bool_t,   0, "If 'True', normalize velocities in TwistController, else let RobotHW handle the limits",  True)
gen.add("tolerance",    double_t, 0, "Tolerance around joint position limits where velocities are normalized [degrees]",  5, 0, 15)

gen.add("base_compensation",   bool_t,   0, "Compensate base motion",  False)
gen.add("base_active",   bool_t,   0, "Command base actively",  False)
gen.add("base_ratio",    double_t, 0, "Value for base_ratio",  0.0, 0, 1)
gen.add("reset_markers",   bool_t,   0, "Reset Markers",  False)


exit(gen.generate(PACKAGE, "cob_twist_controller", "TwistController"))
